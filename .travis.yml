language: c++
compiler: clang
os: linux
sudo: false


matrix:
  allow_failures:
    - env: BOOST_VERSION=trunk

  include:
    # clang 3.5
    # - env: COMPILER=clang++-3.5 BOOST_VERSION=1.57.0 UNIT_TESTS=true
    #   addons: &clang35
    #     apt:
    #       packages:
    #         - clang-3.5
    #         - valgrind
    #       sources:
    #         - ubuntu-toolchain-r-test
    #         - llvm-toolchain-precise-3.5

    # - env: COMPILER=clang++-3.5 BOOST_VERSION=1.58.0 UNIT_TESTS=true
    #   addons: *clang35

    # - env: COMPILER=clang++-3.5 BOOST_VERSION=trunk UNIT_TESTS=true
    #   addons: *clang35


    # clang 3.6
    # - env: COMPILER=clang++-3.6 BOOST_VERSION=1.57.0 UNIT_TESTS=true
    #   addons: &clang36
    #     apt:
    #       packages:
    #         - clang-3.6
    #         - valgrind
    #       sources:
    #         - ubuntu-toolchain-r-test
    #         - llvm-toolchain-precise-3.6

    # - env: COMPILER=clang++-3.6 BOOST_VERSION=1.58.0 UNIT_TESTS=true
    #   addons: *clang36

    # - env: COMPILER=clang++-3.6 BOOST_VERSION=trunk UNIT_TESTS=true
    #   addons: *clang36


    # clang 3.7
    - env: COMPILER=clang++-3.7 BOOST_VERSION=1.57.0 UNIT_TESTS=true
      addons: &clang37
        apt:
          packages:
            - clang-3.7
            - valgrind
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise # latest

    # - env: COMPILER=clang++-3.7 BOOST_VERSION=1.58.0 UNIT_TESTS=true
    #   addons: *clang37

    # - env: COMPILER=clang++-3.7 BOOST_VERSION=trunk UNIT_TESTS=true
    #   addons: *clang37


    # gcc 5.1
    - env: COMPILER=g++-5.1 BOOST_VERSION=1.57.0 UNIT_TESTS=true
      addons: &gcc5
        apt:
          packages:
          - gcc-5
          - valgrind
        sources:
          - ubuntu-toolchain-r-test

    # - env: COMPILER=g++-5.1 BOOST_VERSION=1.58.0 UNIT_TESTS=true
    #   addons: *gcc5

    # - env: COMPILER=g++-5.1 BOOST_VERSION=trunk UNIT_TESTS=true
    #   addons: *gcc5


    # Release benchmarks
    # - env: COMPILER=clang++-3.5 BOOST_VERSION=1.57.0 BENCHMARKS=true BUILD_TYPE=Release
    #   addons: *clang35

    # - env: COMPILER=clang++-3.6 BOOST_VERSION=1.57.0 BENCHMARKS=true BUILD_TYPE=Release
    #   addons: *clang36

    # - env: COMPILER=clang++-3.7 BOOST_VERSION=1.57.0 BENCHMARKS=true BUILD_TYPE=Release
    #   addons: *clang37

    # - env: COMPILER=g++-5.1 BOOST_VERSION=1.57.0 BENCHMARKS=true BUILD_TYPE=Release
    #   addons: *gcc5


    # Debug benchmarks
    #
    # Note: We do _not_ run the Debug benchmarks on Clang 3.5, because it does not
    # have support for debug information for `auto`, and it produces compilation
    # errors. So we use the default build type instead for Clang 3.5.
    # - env: COMPILER=clang++-3.5 BOOST_VERSION=1.57.0 BENCHMARKS=true
    #   addons: *clang35

    # - env: COMPILER=clang++-3.6 BOOST_VERSION=1.57.0 BENCHMARKS=true BUILD_TYPE=Debug
    #   addons: *clang36

    # - env: COMPILER=clang++-3.7 BOOST_VERSION=1.57.0 BENCHMARKS=true BUILD_TYPE=Debug
    #   addons: *clang37

    # - env: COMPILER=g++-5.1 BOOST_VERSION=1.57.0 BENCHMARKS=true BUILD_TYPE=Debug
    #   addons: *gcc5


env:
  global:
    # GitHub token for pushing the documentation, logging in with the
    # Travis command line utility and so on. The token is stored in the
    # ${GITHUB_TOKEN} environment variable.
    - secure: "gikHKTxWGN9FnJ9m+F53Y5j7jWGAOKlL2ylcFM2o0KoXOkoNAK9bJpilNppRwWhgwpC3yTJDN0k7xh9I6Ec8L0G46Q2QZdtJ/NFvWbafpzQcrAg6+872yKlP8h3GHexwEDdAdxCv8g2HeavFrDcqynssI8IoIHyZmsR6Dwym+eo="

  # We define the documentation job here instead of in matrix.include, because
  # otherwise we end up with a job that has no environment variables at all in
  # the matrix.
  matrix:
    - COMPILER=clang++-3.7 BOOST_VERSION=1.58.0 DOCUMENTATION=true

# These addons are just for the documentation job.
addons: *clang37


install:
  # All the dependencies are installed to the deps/ subdirectory.
  - DEPS_DIR="${PWD}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  # Install Boost headers
  - if [ "${BOOST_VERSION}" == "1.57.0" ]; then BOOST_TARBALL_URL="http://sourceforge.net/projects/boost/files/boost/1.57.0/boost_1_57_0.tar.gz"; fi
  - if [ "${BOOST_VERSION}" == "1.58.0" ]; then BOOST_TARBALL_URL="http://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz"; fi
  - if [ "${BOOST_VERSION}" != "trunk" ]; then travis_wait travis_retry wget --quiet -O boost.tar.gz ${BOOST_TARBALL_URL}; fi
  - if [ "${BOOST_VERSION}" != "trunk" ]; then mkdir boost && tar --strip-components=1 -C boost -xzf boost.tar.gz; fi
  - if [ "${BOOST_VERSION}" == "trunk" ]; then travis_wait travis_retry git clone --depth 1 --recursive --quiet http://github.com/boostorg/boost.git; fi
  - if [ "${BOOST_VERSION}" == "trunk" ]; then (cd boost && ./bootstrap.sh && ./b2 headers); fi

  # Install a recent CMake
  - travis_wait travis_retry wget --quiet -O cmake.tar.gz http://www.cmake.org/files/v3.2/cmake-3.2.1-Linux-x86_64.tar.gz
  - mkdir cmake && tar --strip-components=1 -C cmake -xzf cmake.tar.gz
  - export PATH=${PWD}/cmake/bin:${PATH}

  # Install libc++ with libstdc++ (see http://libcxx.llvm.org)
  - echo | g++ -Wp,-v -x c++ - -fsyntax-only
  - travis_wait travis_retry svn --quiet co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx
  - mkdir libcxx/build
  - (cd libcxx/build && cmake .. -DLIBCXX_CXX_ABI=libstdc++ -DLIBCXX_CXX_ABI_INCLUDE_PATHS="/usr/include/c++/4.6;/usr/include/c++/4.6/x86_64-linux-gnu")
  - make -C libcxx/build cxx -j2

  # Install a more recent Doxygen via Linuxbrew
  - if [[ "${DOCUMENTATION}" == "true" ]]; then ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install)" </dev/null; fi
  - if [[ "${DOCUMENTATION}" == "true" ]]; then export PATH=${HOME}/.linuxbrew/bin:${PATH}; fi
  - if [[ "${DOCUMENTATION}" == "true" ]]; then brew install doxygen; fi

  - if [[ "${BENCHMARKS}" == "true" ]]; then rvm use 2.1 --install --binary --fuzzy; fi
  - if [[ "${BENCHMARKS}" == "true" ]]; then gem install ruby-progressbar tilt; fi


before_script:
  # Go back to the root of the project.
  - cd ${TRAVIS_BUILD_DIR}

  # Set the git identity (for pushing the documentation and the benchmarks)
  - git config --global user.name "Travis bot"

  # Check baseline memory usage; useful to know when OOMs occur
  - free
  - vmstat
  - ps aux --sort=-rss | head -n 10

  # Setup the build directory
  - mkdir build
  - cd build
  - cmake .. -DCMAKE_CXX_COMPILER=${COMPILER} -DBOOST_ROOT=${DEPS_DIR}/boost -DLIBCXX_ROOT=${DEPS_DIR}/libcxx/build -DVALGRIND_COMMAND=valgrind -DCMAKE_BUILD_TYPE=${BUILD_TYPE}


script:
  # Only push the documentation when we're on master, otherwise just make sure it builds properly.
  # When we push, we disable the output to avoid leaking the GitHub token.
  - if [[ "${DOCUMENTATION}" == "true" && ("${TRAVIS_PULL_REQUEST}" == "true" || "${TRAVIS_BRANCH}" != "master") ]]; then make doc; fi
  - if [[ "${DOCUMENTATION}" == "true" && "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then make gh-pages.push &>/dev/null; fi

  # We only run the benchmarks on `master` when we're not in a pull request, because
  # otherwise it takes too much Travis resources. Note that we don't exit earlier in the
  # script because we still want to make sure our dependencies can be installed when we
  # push on develop. This is just to minimize the chances of breaking the build on master.
  #
  # When we run the benchmarks, we pre-clone the datasets branch, so the next datasets.clone
  # will just pull, which is pretty quick. This reduces the risk of push conflicts when these
  # jobs all run at the same time. When we push, we use travis_retry to try again if we encounter
  # a push conflict, and we disable the output to avoid leaking the GitHub token.
  - if [[ "${BENCHMARKS}" == "true" && ("${TRAVIS_PULL_REQUEST}" == "true" || "${TRAVIS_BRANCH}" != "master") ]]; then exit; fi
  - if [[ "${BENCHMARKS}" == "true" ]]; then make benchmarks -k; fi
  - if [[ "${BENCHMARKS}" == "true" ]]; then make datasets.clone; fi
  - if [[ "${BENCHMARKS}" == "true" ]]; then travis_retry make datasets.push &>/dev/null; fi

  - if [[ "${UNIT_TESTS}" == "true" ]]; then make compile.headers compile.examples -k -j2 &>/dev/null; fi
  - if [[ "${UNIT_TESTS}" == "true" ]]; then make compile.all -k; fi
  - if [[ "${UNIT_TESTS}" == "true" ]]; then make run.all; fi
  - if [[ "${UNIT_TESTS}" == "true" ]]; then make memcheck.all; fi


# notifications:
#   webhooks:
#     urls: https://webhooks.gitter.im/e/ce1e3a2036d94b4a644f
#     on_success: change
#     on_failure: always
